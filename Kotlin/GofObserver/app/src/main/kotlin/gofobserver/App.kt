/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package gofobserver

import java.lang.Exception
import kotlin.random.Random

/**
観察される側(=Subject)と観察する側(=Observer)の2つの役割が存在し、
Subjectの状態が変化した際にObserverに通知されるデザインパターンです。
そのため、状態変化に応じた処理を記述する時に有効です。
 */
interface Observer {
    fun update(generator: Subject)
}

interface Subject {
    fun addObserver(observer: Observer)
    fun removeObserver(observer: Observer)
    fun notifyObserver()
    fun getNumber(): Int
    fun execute()
}

class DegitObserver : Observer {
    override fun update(generator: Subject) {
        println("DegitObserver : ${generator.getNumber()}")
        try {
            Thread.sleep(500)
        } catch (e: Exception) {

        }
    }
}

class GraphObserver : Observer {
    override fun update(generator: Subject) {
        println("GraphObserver : ")
        (0..generator.getNumber()).forEach { _ -> print("*") }
        println("")
        try {
            Thread.sleep(500)
        } catch (e: Exception) {

        }
    }
}

abstract class NumberGenerator(
    private val observers: MutableList<Observer> = mutableListOf()
) : Subject {
    override fun getNumber(): Int = 0

    override fun addObserver(observer: Observer) {
        observers.add(observer)
    }

    override fun removeObserver(observer: Observer) {
        observers.remove(observer)
    }

    override fun notifyObserver() {
        observers.forEach { observer ->
            observer.update(this)
        }
    }
}

class RandomNumberGenerator(
    private var number: Int = 0
) : NumberGenerator() {
    override fun getNumber(): Int = number

    override fun execute() {
        (0..5).forEach { _ ->
            number = Random.nextInt(50)
            notifyObserver()
        }
    }
}

fun main() {
    val generator = RandomNumberGenerator()
    generator.addObserver(DegitObserver())
    generator.addObserver(GraphObserver())
    generator.execute()
}